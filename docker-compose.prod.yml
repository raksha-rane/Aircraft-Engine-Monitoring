# Docker Compose for Production Environment
version: '3.8'

services:
  # Infrastructure Services
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - engine-monitoring-prod
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_JVM_PERFORMANCE_OPTS: "-Xmx1G -Xms1G"
    networks:
      - engine-monitoring-prod
    restart: always
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  postgres:
    image: postgres:13
    environment:
      POSTGRES_DB: engine_monitoring
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - engine-monitoring-prod
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_prod_data:/data
    networks:
      - engine-monitoring-prod
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Application Services
  dashboard:
    build:
      context: .
      dockerfile: Dockerfile.dashboard
    ports:
      - "80:8501"  # Production port
    depends_on:
      - postgres
      - redis
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/engine_monitoring
      - REDIS_HOST=redis
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    networks:
      - engine-monitoring-prod
    restart: always
    deploy:
      replicas: 2  # High availability
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  producer:
    build:
      context: .
      dockerfile: Dockerfile.producer
    depends_on:
      - kafka
    environment:
      - FLASK_ENV=production
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    networks:
      - engine-monitoring-prod
    restart: always
    deploy:
      replicas: 2  # Multiple producers for reliability
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  consumer:
    build:
      context: .
      dockerfile: Dockerfile.consumer
    depends_on:
      - kafka
      - postgres
      - redis
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/engine_monitoring
      - REDIS_HOST=redis
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    networks:
      - engine-monitoring-prod
    restart: always
    deploy:
      replicas: 3  # Multiple consumers for high throughput
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Monitoring and Logging
  nginx:
    image: nginx:alpine
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - dashboard
    networks:
      - engine-monitoring-prod
    restart: always

networks:
  engine-monitoring-prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_prod_data:
  redis_prod_data:
